# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

##==============================================================================
##
## Environmental Variables
##
##==============================================================================

# oehost dependencies
set(OEHOST_DEPENDENCIES)

# oehost libraries
set(OEHOST_PUBLIC_LIBRARIES)
set(OEHOST_PRIVATE_LIBRARIES)
set(OEHOST_INTERFACE_LIBRARIES)

# oehost directories
set(OEHOST_PRIVATE_DIRECTORIES)

# oehost compile options
set(OEHOST_TARGET_COMPILE_PUBLIC_OPTIONS)
set(OEHOST_TARGET_COMPILE_PRIVATE_OPTIONS)

# oehost compile definitions
set(OEHOST_TARGET_COMPILE_PUBLIC_DEFINITIONS)
set(OEHOST_TARGET_COMPILE_PRIVATE_DEFINITIONS)

# oehostverify libraries
set(OEHOST_VERIFY_PUBLIC_LIBRARIES)
set(OEHOST_VERIFY_PRIVATE_LIBRARIES)
set(OEHOST_VERIFY_INTERFACE_LIBRARIES)

# oehostverify compile definitions
set(OEHOST_VERIFY_TARGET_COMPILE_PUBLIC_DEFINITIONS)
set(OEHOST_VERIFY_TARGET_COMPILE_PRIVATE_DEFINITIONS)

# oehostverify directories
set(OEHOST_VERIFY_PRIVATE_DIRECTORIES)

# oehostapp libraries
set(OEHOST_APP_INTERFACE_LIBRARIES)

# LIBSGX properties
set(SGX_ENCLAVE_COMMON_PROPERTIES)
set(SGX_DCAP_Q1_PROPERTIES)

# Platform properties
set(PLATFORM_HOST_ONLY_SRC)
set(PLATFORM_SDK_ONLY_SRC)

# MISC
set(PLATFORM_FLAGS)
set(LIBPATHS)
set(INCPATHS)
set(WINSYSLOCATION)
set(EDL_DIR ${CMAKE_SOURCE_DIR}/common)
set(TEE_EDL_FILE ${EDL_DIR}/tee.edl)

##==============================================================================
##
## These rules generate the edge routines for the internal TEE-agnostic
## ECALLs/OCALLs used by liboehost/liboecore.
##
##==============================================================================

add_custom_command(
    OUTPUT tee_u.h tee_u.c tee_args.h
    DEPENDS ${TEE_EDL_FILE} edger8r
    COMMAND edger8r --search-path ${EDL_DIR} --untrusted ${TEE_EDL_FILE})

add_custom_target(tee_untrusted_edl
    DEPENDS tee_u.h tee_u.c tee_args.h)

##==============================================================================
##
## These rules generate the edge routines for the SYSCALL interface, which is
## installed by oe_register_syscall_ecall_function_table().
##
##==============================================================================

set(SYSCALL_EDL ${EDL_DIR}/syscall.edl)

add_custom_command(
    OUTPUT syscall_u.h syscall_u.c syscall_args.h
    DEPENDS ${SYSCALL_EDL} edger8r
    COMMAND edger8r --search-path ${EDL_DIR} --untrusted ${SYSCALL_EDL})

add_custom_target(syscall_untrusted_edl
    DEPENDS syscall_u.h syscall_u.c syscall_args.h)

##==============================================================================
##
## these rules configure targets and dependencies based on platform logic
##
##==============================================================================

# SGX and TrustZone specific
if (OE_SGX)
    ##==============================================================================
    ##
    ## These rules generate the edge routines for the internal SGX-specific
    ## ECALLs/OCALLs used by liboehost/liboecore.
    ##
    ##==============================================================================

    set(SGX_EDL_FILE ${EDL_DIR}/sgx/sgx.edl)

    add_custom_command(
        OUTPUT sgx_u.h sgx_u.c sgx_args.h
        DEPENDS ${SGX_EDL_FILE} edger8r
        COMMAND edger8r --search-path ${EDL_DIR} --untrusted ${SGX_EDL_FILE})

    add_custom_target(sgx_untrusted_edl
        DEPENDS sgx_u.h sgx_u.c sgx_args.h)

  add_subdirectory(sgx)
elseif(OE_TRUSTZONE)
  add_subdirectory(optee)
endif()

# OS specific but arch agnostic files.
if (UNIX)
  add_subdirectory(linux)
elseif (WIN32)
  add_subdirectory(windows)
else()
  message(FATAL_ERROR "Unknown OS. Only supported OSes are Linux and Windows")
endif()

# LIBSGX config
if(USE_LIBSGX)
  find_library(LIBSGX_COMMON NAMES sgx_enclave_common PATHS ${LIBPATHS})
  find_library(LIBSGX_QE NAMES sgx_dcap_ql PATHS ${LIBPATHS})
  if (NOT LIBSGX_COMMON OR NOT LIBSGX_QE)
    message(FATAL_ERROR "No SGX libraries found, aborting! Set -DUSE_LIBSGX=OFF to ignore.")
  endif ()

  add_library(sgx_enclave_common SHARED IMPORTED)
  add_library(sgx_dcap_ql SHARED IMPORTED)

  set_target_properties(sgx_enclave_common ${SGX_ENCLAVE_COMMON_PROPERTIES})
  set_target_properties(sgx_dcap_ql ${SGX_DCAP_Q1_PROPERTIES})

  list(APPEND OEHOST_PUBLIC_LIBRARIES
    sgx_enclave_common
    sgx_dcap_ql)

endif()

##==============================================================================
##
## These common rules configure targets, libraries and dependencies based on
## arch and os agnostic logic
##
##==============================================================================

# Common host verification files that work on any OS/architecture.
list(APPEND PLATFORM_HOST_ONLY_SRC
  ../common/datetime.c
  ../common/safecrt.c
  hexdump.c
  dupenv.c
  tests.c
  result.c
  traceh.c)

# Common files that are used in the OE SDK only.
list(APPEND PLATFORM_SDK_ONLY_SRC
  ../common/kdf.c
  ../common/lockless_queue.c
  ../common/argv.c
  asym_keys.c
  calls.c
  ocalls.c
  error.c
  files.c
  fopen.c
  memalign.c
  syscall_u_wrapper.c
  signkey.c
  strings.c
  tee_u_wrapper.c
  traceh_enclave.c)

# Common public libraries used by the oehost target
list(APPEND OEHOST_PUBLIC_LIBRARIES
  oe_includes)

# Common public libraries used by the oehostverify target
list(APPEND OEHOST_VERIFY_PUBLIC_LIBRARIES
  oe_includes)

# Common interface libraries used by the oehostapp target
list(APPEND OEHOST_APP_INTERFACE_LIBRARIES
  oehost)

# Common oehost dependencies
list(APPEND OEHOST_DEPENDENCIES
  syscall_untrusted_edl
  tee_untrusted_edl)

# common oehost directories
# For including edge routines.
list(APPEND OEHOST_PRIVATE_DIRECTORIES
  ${CMAKE_CURRENT_BINARY_DIR})

#####
# Common oehost compile definitions
list(APPEND OEHOST_TARGET_COMPILE_PUBLIC_DEFINITIONS
  # NOTE: This definition is public to the rest of our project's
  # targets, but should not yet be exposed to consumers of our
  # package.
  $<BUILD_INTERFACE:OE_API_VERSION=2>)

if (USE_LIBSGX)
  list(APPEND OEHOST_TARGET_COMPILE_PUBLIC_DEFINITIONS
  OE_USE_LIBSGX)
endif ()

list(APPEND OEHOST_TARGET_COMPILE_PRIVATE_DEFINITIONS
  OE_BUILD_UNTRUSTED
  OE_REPO_BRANCH_NAME="${GIT_BRANCH}"
  OE_REPO_LAST_COMMIT="${GIT_COMMIT}")

if (USE_DEBUG_MALLOC)
  list(APPEND OEHOST_TARGET_COMPILE_PRIVATE_DEFINITIONS
    OE_USE_DEBUG_MALLOC)
endif ()

# Common oehost compile options
if (CMAKE_C_COMPILER_ID MATCHES GNU)
  list(APPEND OEHOST_TARGET_COMPILE_PRIVATE_OPTIONS
    -Wjump-misses-init)
endif ()

# Common oehostverify compile options
list(APPEND OEHOST_VERIFY_TARGET_COMPILE_PRIVATE_OPTIONS
  $<TARGET_PROPERTY:oehost,COMPILE_OPTIONS>)

list(APPEND OEHOST_VERIFY_TARGET_COMPILE_INTERFACE_OPTIONS
  $<TARGET_PROPERTY:oehost,INTERFACE_COMPILE_OPTIONS>)

# Use the same the compile options from oehost.
list(APPEND OEHOST_VERIFY_TARGET_COMPILE_PRIVATE_DEFINITIONS
  $<TARGET_PROPERTY:oehost,COMPILE_DEFINITIONS>)

# Use the same the compile  definitions from oehost.
list(APPEND OEHOST_VERIFY_TARGET_COMPILE_INTERFACE_DEFINITIONS
  $<TARGET_PROPERTY:oehost,INTERFACE_COMPILE_DEFINITIONS>)

##==============================================================================
##
## Create libraries
##
##==============================================================================

# Combine the following common code along with the platform specific code and
# host verification code to get the full oehost target provided by the OE SDK.
add_library(oehost STATIC
  ${PLATFORM_HOST_ONLY_SRC}
  ${PLATFORM_SDK_ONLY_SRC})

add_library(oehostverify STATIC ${PLATFORM_HOST_ONLY_SRC})

# Convenience library for creating a host-app (that needs the
# -rdynamic link flag). We do this by default for the oehostverify target too.
add_library(oehostapp INTERFACE)

##==============================================================================
##
## Link target libraries, as needed
##
##==============================================================================

# Library Dependency
find_package(Threads REQUIRED)

if(NOT "${OEHOST_PUBLIC_LIBRARIES}" STREQUAL "")
  target_link_libraries(oehost PUBLIC ${OEHOST_PUBLIC_LIBRARIES})
endif()

if(NOT "${OEHOST_PRIVATE_LIBRARIES}" STREQUAL "")
  target_link_libraries(oehost PRIVATE ${OEHOST_PRIVATE_LIBRARIES})
endif()

if(NOT "${OEHOST_VERIFY_PUBLIC_LIBRARIES}" STREQUAL "")
  target_link_libraries(oehostverify PUBLIC ${OEHOST_VERIFY_PUBLIC_LIBRARIES})
endif()

if(NOT "${OEHOST_VERIFY_PRIVATE_LIBRARIES}" STREQUAL "")
  target_link_libraries(oehostverify PRIVATE ${OEHOST_PRIVATE_LIBRARIES})
endif()

if(NOT "${OEHOST_VERIFY_INTERFACE_LIBRARIES}" STREQUAL "")
  target_link_libraries(oehostverify INTERFACE  ${OEHOST_VERIFY_INTERFACE_LIBRARIES})
endif()

if(NOT "${OEHOST_APP_INTERFACE_LIBRARIES}" STREQUAL "")
  target_link_libraries(oehostapp INTERFACE  ${OEHOST_APP_INTERFACE_LIBRARIES})
endif()

##==============================================================================
##
## Link target directories, as needed
##
##==============================================================================


if(NOT "${OEHOST_PRIVATE_DIRECTORIES}" STREQUAL "")
  target_include_directories(oehost PRIVATE ${OEHOST_PRIVATE_DIRECTORIES})
endif()

if(NOT "${OEHOST_VERIFY_PRIVATE_DIRECTORIES}" STREQUAL "")
  target_include_directories(oehostverify PRIVATE  ${OEHOST_VERIFY_PRIVATE_DIRECTORIES})
endif()

if(UNIX)
elseif(WIN32)
  target_link_libraries(oehost PRIVATE bcrypt Crypt32)
  target_include_directories(oehostverify PRIVATE
    ${CMAKE_SOURCE_DIR}/3rdparty/mbedtls/mbedtls/include)
  target_link_libraries(oehostverify PRIVATE bcrypt Crypt32)
endif()


##==============================================================================
##
## Add target dependencies
##
##==============================================================================

add_dependencies(oehost ${OEHOST_DEPENDENCIES})

##==============================================================================
##
## Add target compile options
##
##==============================================================================

target_compile_options(oehost PUBLIC ${OEHOST_TARGET_COMPILE_PUBLIC_OPTIONS})
target_compile_options(oehost PRIVATE ${OEHOST_TARGET_COMPILE_PRIVATE_OPTIONS} )

##==============================================================================
##
## Add target compile definitions
##
##==============================================================================

target_compile_definitions(oehost PRIVATE ${OEHOST_TARGET_COMPILE_PRIVATE_DEFINITIONS})
target_compile_definitions(oehost PUBLIC ${OEHOST_TARGET_COMPILE_PUBLIC_DEFINITIONS})

target_compile_definitions(oehostverify PRIVATE ${OEHOST_VERIFY_TARGET_COMPILE_PRIVATE_DEFINITIONS})
target_compile_definitions(oehostverify INTERFACE ${OEHOST_VERIFY_TARGET_COMPILE_INTERFACE_DEFINITIONS})

##==============================================================================
##
## Install targets
##
##==============================================================================

# TODO: Remove this hard coded output directory.
set_property(TARGET oehost PROPERTY
  ARCHIVE_OUTPUT_DIRECTORY ${OE_LIBDIR}/openenclave/host)

install(TARGETS oehost EXPORT openenclave-targets
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/openenclave/host)

install(TARGETS oehostapp EXPORT openenclave-targets)

install(TARGETS oehostverify EXPORT openenclave-targets
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/openenclave/host
  COMPONENT OEHOSTVERIFY)